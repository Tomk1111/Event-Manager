public static String accountStatement(int userId, int userType) 
	{
	    // Want to return a String output that contains the amount due by each user - this output is depending on whether a admin or a user calls the method  
	    double amountDue = 0.0;
		String userEmail = "";
		Currency curr = Currency.getInstance("EUR");						 
 		String symbol = curr.getSymbol();
		for (int j = 0;j<users.size();j++)
		{
			if (users.get(j).getUserId() == userId)
				userEmail = users.get(j).getEmail();
		}
	    String statement = ("User ID: "+userId + "    Email: " + userEmail +"    Amount Due: "+symbol+amountDue+"\n");
		String statement2 = ("User ID: " +userId+  "    Email: "+ userEmail );
         for (int i = 0 ; i < bookings.size(); i++ )
	     {
             if (bookings.get(i).getUserId() == userId)
		     {
	             int facilityID = bookings.get(i).getFacilityId();
		             for (int y = 0; i < facilities.size();y++)
                     {
	                     if (facilities.get(y).getFacilityId() == facilityID)
			             {
			                 if (userType == 1)  // whats returned to a admin
			                 {
			                     if (bookings.get(i).getPaymentStatus() == false)
	     	                     {
			                         amountDue += facilities.get(y).getPricePerHour();                     
                                     statement = "User ID: "+userId + "    Email: " + userEmail + "    Amount Due: "+symbol+ ""+ amountDue+"\n"; /// returned to normal user !!!???!!!!									
                                     return(statement);
						         }
                             }
			                 else  /// user type 2 returned to a ordinary user
			                 {
			                     boolean ff =  (bookings.get(i).getPaymentStatus() == false );
      				             if (ff)
				                 {
				                     amountDue += facilities.get(y).getPricePerHour();
						             statement2 += ( facilities.get(y).getFacilityName() + " " + symbol+""+facilities.get(y).getPricePerHour()  + "  Paid Status: " + ff +"\n");	 
						             
									 System.out.println("UserTpe2 :: Amount Due: " + amountDue + " state: " + statement);	 
				                 }
						 
				     //statement += ( facilities.get(y).getFacilityName() + " " + symbol+""+facilities.get(y).getPricePerHour()  + "  Paid Status: " + ff +"\n");				    
			                 }
		                 }
                     }
		     }				
		 } 
	     statement2 += ("\nAmount Due:     " + amountDue);
	
		
	
		System.out.println("Ret " + statement);
	    return statement2;
	}
	
	/*  IF UserType 2		
		
		User Id : 4 || JJ@CSIS.UL
		Church Room   €100     Paid
 		Tea Room       €25   Unpaid
		Room 3         €12   Unpaid
		
		Amount Due:            €37
		
		========
		
		IF UserType 1
		
		User Id: 4 || JJ@CSIS.UL	  Amnt Due €37		*/
		
=====
======
======
=====
import java.time.*;
import java.time.format.*;
import javax.swing.*;
public class dateLoop2
{
    public static void main(String[] args)
	{
	     String d1 = menuBox("Enter the first date you want to view the dates between.\nIn the format dd/MM/yyyy");
		 String d2 = menuBox("Enter the second date to view the availability between.\nIn the format dd/MM/yyyy");
		 try{
		 boolean check = isValidDate(d1);
		 while(check == false)
		 {
		     String date = menuBox("Please enter a valid date for the first date again:\nFormat(DD/MM/YYYY)");
			 check = isValidDate(date);
		 }
		
		 check = isValidDate(d2);
		 while(check == false)
		 {
		     String date = menuBox("Please enter a valid date for the second date again:\nFormat(DD/MM/YYYY)");
			 check = isValidDate(d2);
		 }
		 }
		 catch(Exception e){}
		 
		 // need to check is the first date before the second one and how many iterations of my loop to store in the array
		     
                 DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                 LocalDate date = LocalDate.parse(d1, formatter);
		 LocalDate date2 = LocalDate.parse(d2, formatter);
		 
		 int dateDifference = date.compareTo(date2);
		 
		 /// compare to -- different way of using it 
		 int ff = Math.abs(dateDifference); 
		 
		 /// only want to limit to a week in difference as anything greater will be too much and break the JOptionPane
		 System.out.println(ff + " date diff ");
		 
		 
		 String[] names = new String[ff];
		 // looping over the two dates to get the options for the user
		 LocalDate temp = date;
		 String output;
		 int count = 0;
		 while (temp.isBefore(date2))
		 {
		     temp = temp.plusDays(1);
		     output = temp.format(formatter);
			 names[count] = output;
			 count++;
		 }
		 
		 // user chooses date from the dropDown
		 String dateChoice = dropDown(names, "Choose a date to view");
                 LocalDate date777 = LocalDate.parse(dateChoice,formatter);
         		  
	}
	
	public static boolean isValidDate(String date)
	{
		try
		{
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
			LocalDate test = LocalDate.parse(date, formatter);
			System.out.println(" TRUE" + test);
			return true;
		}
		catch(Exception e)
		{
			return false;
		}
	}
	
	public static String dropDown(String[] options, String dialogText)
	{
		String selection = "";
		if (options.length != 0)
		{
			selection = (String)JOptionPane.showInputDialog(null, dialogText, "Input", 1, null, options, options[0]);
		}
		return selection;
	}
	
	
	
	public static String menuBox(String options)
	{
		String input="";
		try
		{
			input=JOptionPane.showInputDialog(null,options);
			return input;
		}
		catch(Exception e)
		{
		JOptionPane.showMessageDialog(null,"Error: no String entered");
		return menuBox(options);
		}
	}
}

